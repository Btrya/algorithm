/**
 * 2022/04/01 动规日题 
 * 413. 等差数列划分
 * 如果一个数列 至少有三个元素 ，并且任意两个相邻元素之差相同，则称该数列为等差数列。
 * 
 * 例如，[1,3,5,7,9]、[7,7,7,7] 和 [3,-1,-5,-9] 都是等差数列。
 * 给你一个整数数组 nums ，返回数组 nums 中所有为等差数组的 子数组 个数。
 * 
 * 子数组 是数组中的一个连续序列。
 * 
 * 示例 1：
 * 
 * 输入：nums = [1,2,3,4]
 * 输出：3
 * 解释：nums 中有三个子等差数组：[1, 2, 3]、[2, 3, 4] 和 [1,2,3,4] 自身。
 * 示例 2：
 * 
 * 输入：nums = [1]
 * 输出：0
 *  
 * 
 * 提示：
 * 
 * 1 <= nums.length <= 5000
 * -1000 <= nums[i] <= 1000
 */
/**
 * @param {number[]} nums
 * @return {number}
 */
 var numberOfArithmeticSlices = function(nums) {
  const n = nums.length
  if (n < 3) return 0
  let diff = nums[0] - nums[1], t = 0
  let ans = 0
  for (let i = 2; i < n; ++i) {
    if (nums[i - 1] - nums[i] == diff) ++t
    else {
      diff = nums[i - 1] - nums[i]
      t = 0
    }
    ans += t
  }
  return ans
};

/**
 * 91. 解码方法
 * 一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：
 * 
 * 'A' -> "1"
 * 'B' -> "2"
 * ...
 * 'Z' -> "26"
 * 要 解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，"11106" 可以映射为：
 * 
 * "AAJF" ，将消息分组为 (1 1 10 6)
 * "KJF" ，将消息分组为 (11 10 6)
 * 注意，消息不能分组为  (1 11 06) ，因为 "06" 不能映射为 "F" ，这是由于 "6" 和 "06" 在映射中并不等价。
 * 
 * 给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。
 * 
 * 题目数据保证答案肯定是一个 32 位 的整数。
 * 
 *  
 * 
 * 示例 1：
 * 
 * 输入：s = "12"
 * 输出：2
 * 解释：它可以解码为 "AB"（1 2）或者 "L"（12）。
 * 示例 2：
 * 
 * 输入：s = "226"
 * 输出：3
 * 解释：它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。
 * 示例 3：
 * 
 * 输入：s = "0"
 * 输出：0
 * 解释：没有字符映射到以 0 开头的数字。
 * 含有 0 的有效映射是 'J' -> "10" 和 'T'-> "20" 。
 * 由于没有字符，因此没有有效的方法对此进行解码，因为所有数字都需要映射。
 *  
 * 
 * 提示：
 * 
 * 1 <= s.length <= 100
 * s 只包含数字，并且可能包含前导零。
 */
/**
 * @param {string} s
 * @return {number}
 */
 var numDecodings = function(s) {
  const n = s.length
  s = " " + s
  const dp = new Array(n + 1).fill(0)
  dp[0] = 1
  for (let i = 1; i <= n; ++i) {
    const a = s[i] - '0', b = (s[i - 1] - '0') * 10 + (s[i] - '0')
    if (a !== 0) {
      dp[i] = dp[i - 1]
    }
    if (b >= 10 && b <= 26) dp[i] += dp[i - 2]
  }
  return dp[n]
};